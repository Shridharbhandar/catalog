AWSTemplateFormatVersion: 2010-09-09
Description: 'Creates EC2 instances with Autoscaling, Load Balancer & Security Group'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Environment Details
        Parameters:
          - Instances
          - SecurityGroup
          - LoadBalancer
          - AutoScaling
    ParameterLabels:
      Instances:
        default: Instances
      SecurityGroup:
        default: SecurityGroup
      LoadBalancer:
        default: LoadBalancer
      AutoScaling:
        default: AutoScaling

Mappings:
  EnvironmentMaps:
    Dev:
      Subnets: 
        - !Ref Subnets
    Prod:
      Subnets: 
        - !Ref Subnets
        - !Ref Subnets
    
Parameters:
  ClientName: 
    Description: provide the Client Name to Provision the service.
    Type: String
    Default: ibx
    
  ServiceName:
    Description: provide the Client Name to Provision the service.
    Type: String
    Default: jenkins
    AllowedValues:
      - jenkins
      - datadog
      - circleci
    
  InstanceType:
    Description: The Instance details
    Type: String
    AllowedValues:
      - t2.micro
      - t2.small
    
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: ''
    
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
      
  ImageId:
    Type: 'AWS::EC2::Image::Id'
    Description: Image name
    Default: ami-0b898040803850657

  Ec2key:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Key used

  Max:
    Type: Number
    Default: 4

  Min:
    Type: Number
    Default: 1

  Environment:
    Description: Type of Env
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
 
  SecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: The list of SecurityGroup Ids to associate with Instance
    Default: ''

Resources:
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: "false"
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref Ec2key
      SecurityGroups: !Ref SecurityGroups
      LaunchConfigurationName: !Join ['-', [ !Ref ClientName , 'CSL', { "Ref" : "ServiceName" }, 'LC']]
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs: 
            VolumeSize: "20"
            VolumeType: "io1"
            Iops: 200
            Encrypted: "true"
        - DeviceName: "/dev/sdj"
          Ebs: 
            VolumeSize: "100"
            DeleteOnTermination: "false"
            Encrypted: "true"
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "installing the userdata"
          if [ ${ServiceName} == 'jenkins' ];then 
            mkdir -p /var/lib/jenkins
            mkfs -t ext4 /dev/xvdj
            echo "/dev/xvdj  /var/lib/jenkins  ext4  defaults,nofail  0  2" >> /etc/fstab
            mount -a
          fi
          curl https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -o /tmp/epel-release-latest-7.noarch.rpm
          if [ ! $(command -v ansible) ]; then
            echo "Installing Ansible dependencies and Git."
            if [ $(command -v yum) ]; then
                yum install -y /tmp/epel-release-latest-7.noarch.rpm
                yum install -y git python3 python3-pip
                pip3 install ansible
            elif [ $(command -v apt-get) ]; then
               apt-get update -qq
               apt-get install -y -qq git python python-dev
            else
               echo "neither yum nor apt-get found!"
               exit 1
            fi
          fi
          mkdir /home/ec2-user/IbexCatalog
          git clone https://github.com/ibexlabs/IbexCatalog.git /home/ec2-user/IbexCatalog/
          echo -e "[all]\nlocalhost ansible_connection=local" > /home/ec2-user/hosts
          ansible-playbook /home/ec2-user/IbexCatalog/ansible/${ServiceName}/playbook.yml -i /home/ec2-user/hosts
  AutoScaling:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Join ['-', [{ "Ref" : "ClientName" }, 'CSL', { "Ref" : "ServiceName" }, 'ASG']]
      VPCZoneIdentifier: !FindInMap [EnvironmentMaps, !Ref Environment, Subnets]
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref Max
      HealthCheckGracePeriod: '120'
      MinSize: !Ref Min
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: "true"
          
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join ['-', [{ "Ref" : "ClientName" }, 'CSL', { "Ref" : "ServiceName" }, 'ELB']]
      Subnets: !FindInMap [EnvironmentMaps, !Ref Environment, Subnets]
      Type: network
      Tags: 
        - 
           Key: "ClientName"
           Value: !Ref ClientName
           
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: TCP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Join ['-', [{ "Ref" : "ClientName" }, 'CSL', { "Ref" : "ServiceName" }, 'TG']]
      #HealthCheckIntervalSeconds: 30
      #HealthCheckTimeoutSeconds: 5
      #HealthyThresholdCount: 3
      Port: 8080
      Protocol: TCP
      #UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
Outputs:
  URL:
    Description: URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
      
